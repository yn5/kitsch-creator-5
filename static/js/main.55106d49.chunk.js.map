{"version":3,"sources":["styles/reset.js","styles/global.js","lib/sketches/bobross.js","components/views/_styled/bobross-sketch-view.styled.js","components/views/bobross-sketch-view.js","components/views/home-view.js","app.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","colorGenerator","positionGenerator","sizeGenerator","viewWidth","viewHeight","paused","getRandomPoint","jitter","Math","random","clip","input","min","max","clr","jitterY","jitterX","x","y","randomX","randomY","getColorR","getColorG","getColorB","getColorA","getPosition","getSize","togglePause","sketch","clear","setTimeout","draw","Array","from","keys","map","colorR","next","value","colorG","colorB","colorA","colorStroke","position","size","stroke","fill","ellipse","drawEllipse","setup","document","body","offsetWidth","offsetHeight","createCanvas","Container","styled","div","Button","button","Overlay","OverlayHeader","OutputImage","img","Title","h1","CloseButton","setupP5","bobrossSketch","BobrossSketchView","PureComponent","constructor","super","handleClickRenderToImage","this","component","pngDataUrl","canvas","childNodes","toDataURL","getPngDataUrl","setState","handleCloseOverlay","state","componentDidMount","P5","render","onClick","type","ref","comp","alt","src","HomeView","to","pathname","App","basename","process","path","exact","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55106d49.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\n\nimport { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`;\n","/* eslint-disable no-unused-expressions */\n\nimport { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: sans-serif;\n  }\n`;\n","const minute = 60 * 1000;\nconst drawingDuration = 0.2 * minute;\nconst pauseDuration = 0.5 * minute;\nlet paused = false;\nlet viewWidth;\nlet viewHeight;\n\nfunction getRandomPoint(jitter) {\n  return (Math.random() * jitter) - (jitter / 2);\n}\n\nfunction getRandomSizePoint(jitter) {\n  return ((Math.random() ** 1.25) * jitter) - (jitter / 2);\n}\n\nfunction clip(input, min, max) {\n  return Math.min(max, Math.max(min, input));\n}\n\nfunction pause(ps) {\n  paused = !!ps;\n}\n\nfunction* colorGenerator() {\n  const jitter = 2;\n  let clr;\n\n  yield clr = Math.random() * 255;\n\n  while (true) {\n    clr += ((Math.random() * jitter) - (jitter / 2));\n    yield clr = clip(clr, 0, 255);\n  }\n}\n\nfunction* positionGenerator() {\n  const jitterY = 0.01;\n  const jitterX = 0.004;\n  let x = Math.random();\n  let y = Math.random();\n  yield { x, y };\n\n  while (true) {\n    const randomX = getRandomPoint(jitterX);\n    const randomY = getRandomPoint(jitterY);\n    x = clip(x + randomX, 0, 1);\n    y = clip(y + randomY, 0, 1);\n\n    yield {\n      x,\n      y,\n    };\n  }\n}\n\nfunction* sizeGenerator() {\n  let x = (Math.random() ** 2) * 150;\n\n  yield {\n    x,\n    y: x,\n  };\n\n  while (true) {\n    x = clip(0, x + getRandomSizePoint(10), 1050);\n\n    yield {\n      x,\n      y: x,\n    };\n  }\n}\n\nconst getColorR = colorGenerator();\nconst getColorG = colorGenerator();\nconst getColorB = colorGenerator();\nconst getColorA = colorGenerator();\nconst getPosition = positionGenerator();\nconst getSize = sizeGenerator();\n\nconst drawEllipse = (sketch) => {\n  const colorR = getColorR.next().value;\n  const colorG = getColorG.next().value;\n  const colorB = getColorB.next().value;\n  const colorA = getColorA.next().value;\n  const colorStroke = colorR * 0.35;\n\n  const { x, y } = getPosition.next().value;\n  const position = { x: x * viewWidth, y: y * viewHeight };\n  const size = getSize.next().value;\n\n  sketch.stroke(colorStroke);\n  sketch.fill(colorR, colorG, colorB, colorA);\n  sketch.ellipse(position.x, position.y, size.y, size.x);\n};\n\nfunction togglePause(sketch) {\n  if (!paused) {\n    sketch.clear();\n  }\n  setTimeout(() => {\n    pause(!paused);\n    togglePause(sketch);\n  }, paused ? pauseDuration : drawingDuration);\n}\n\nfunction setup(sketch) {\n  return () => {\n    viewWidth = document.body.offsetWidth;\n    viewHeight = document.body.offsetHeight;\n    sketch.createCanvas(viewWidth, viewHeight);\n    togglePause(sketch);\n  };\n}\n\nfunction draw(sketch) {\n  return () => {\n    if (paused) {\n      return;\n    }\n    Array.from(Array(100).keys()).map(() => drawEllipse(sketch));\n  };\n}\n\nexport default {\n  draw,\n  setup,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: 100vh;\n  overflow: hidden;\n  width: 100vw;\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  left: 0;\n  top: 0;\n  margin: 2rem;\n`;\n\nexport const Overlay = styled.div`\n  display: flex;\n  flex-direction: column;\n  z-index: 999;\n  position: fixed;\n  left: 0;\n  top: 0;\n  padding: 2rem;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n`;\n\nexport const OverlayHeader = styled.div`\n  display: flex;\n  flex: 0 1 auto;\n  align-items: center;\n  padding: 1rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nexport const OutputImage = styled.img`\n  display: flex;\n  flex: 1 1 auto;\n  background: url('/assets/images/checkered-transparency-background.svg');\n  background-image: linear-gradient(45deg, #bbbbbb 25%, transparent 25%),\n    linear-gradient(-45deg, #bbbbbb 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, #bbbbbb 75%),\n    linear-gradient(-45deg, transparent 75%, #bbbbbb 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  object-fit: contain;\n  overflow: auto;\n`;\n\nexport const Title = styled.h1`\n  margin: 1rem 0;\n`;\n\nexport const CloseButton = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  border-bottom: 1px solid black;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n`;\n","/* eslint-disable no-param-reassign */\nimport React, { PureComponent } from 'react';\nimport P5 from 'p5';\nimport bobrossSketch from '../../lib/sketches/bobross';\nimport {\n  Button,\n  CloseButton,\n  Container,\n  OutputImage,\n  Overlay,\n  OverlayHeader,\n  Title,\n} from './_styled/bobross-sketch-view.styled';\n\nfunction getPngDataUrl(canvas) {\n  const pngDataUrl = canvas.childNodes?.[0]?.toDataURL('image/png');\n\n  return pngDataUrl;\n}\n\nfunction setupP5(sketch) {\n  sketch.setup = bobrossSketch.setup(sketch);\n  sketch.draw = bobrossSketch.draw(sketch);\n}\n\nexport default class BobrossSketchView extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      pngDataUrl: null,\n    };\n  }\n\n  componentDidMount() {\n    new P5(setupP5, this.component); // eslint-disable-line no-new\n  }\n\n  handleClickRenderToImage = () => {\n    if (!this.component) {\n      return;\n    }\n\n    const pngDataUrl = getPngDataUrl(this.component);\n    this.setState({\n      pngDataUrl,\n    });\n  };\n\n  handleCloseOverlay = () => {\n    this.setState({\n      pngDataUrl: null,\n    });\n  };\n\n  render() {\n    const { pngDataUrl } = this.state;\n\n    return (\n      <>\n        <Button onClick={this.handleClickRenderToImage} type=\"button\">\n          Render to image\n        </Button>\n        <Container\n          ref={(comp) => {\n            this.component = comp;\n          }}\n        />\n        {pngDataUrl && (\n          <Overlay>\n            <OverlayHeader>\n              <Title>\n                You can save the image by right clicking it and using the\n                context menu\n              </Title>\n              <CloseButton onClick={this.handleCloseOverlay} type=\"button\">\n                Close overlay\n              </CloseButton>\n            </OverlayHeader>\n            <OutputImage alt=\"Rendered output\" src={pngDataUrl} />\n          </Overlay>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function HomeView() {\n  return (\n    <Redirect\n      to={{\n        pathname: '/sketches/bobross',\n        state: { from: '/' },\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport ResetStyles from './styles/reset';\nimport GlobalStyles from './styles/global';\nimport BobrossSketchView from './components/views/bobross-sketch-view';\nimport HomeView from './components/views/home-view';\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route component={HomeView} path=\"/\" exact />\n          <Route component={BobrossSketchView} path=\"/sketches/bobross\" exact />\n        </Switch>\n      </BrowserRouter>\n      <ResetStyles />\n      <GlobalStyles />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}